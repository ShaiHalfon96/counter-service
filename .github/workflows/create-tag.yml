name: Create Release Tag

on:
  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string
      commit_message:
        required: true
        type: string

jobs:
  check-commit-message:
    runs-on: ubuntu-latest
    outputs:
      create_tag: ${{ steps.check-message.outputs.create_tag }}
    steps:
      - name: Check if commit message is relevant
        id: check-message
        run: |
          if [[ "${{ inputs.commit_message }}" == feat:* ]] || [[ "${{ inputs.commit_message }}" == fix:* ]] || [[ "${{ inputs.commit_message }}" == refactor:* ]]; then
            echo "create_tag=true" >> $GITHUB_OUTPUT
          else
            echo "create_tag=false" >> $GITHUB_OUTPUT
          fi
  create-release-tag:
    runs-on: ubuntu-latest
    needs: check-commit-message
    if: needs.check-commit-message.outputs.create_tag == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get current tag version
        id: get_version
        run: |
          if git describe --tags --abbrev=0 ; then
            latest_tag=$(git describe --tags --abbrev=0)
          else
            echo "No tags found in the repository."
            latest_tag="1.0" # Or provide an alternative default value if necessary
          fi
          echo "LATEST_TAG=${latest_tag}" >> $GITHUB_ENV
          echo "LATEST_TAG=${latest_tag}"

      - name: Determine new tag version
        id: new_tag
        run: |
          latest_tag=${{ env.LATEST_TAG }}
          tag_base=$(echo $latest_tag | sed 's/\.[0-9]*$//')
          tag_number=$(echo $latest_tag | sed 's/.*\.//')
          new_tag="${tag_base}.$((tag_number + 1))"
          echo "NEW_TAG=${new_tag}" >> $GITHUB_ENV
          echo "New tag will be ${new_tag}"

      - name: Create new tag
        run: |
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}

